{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPMvd0HL6JXbfJDuWXOaeov",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Anshikaa08/Diabetes-Prediction-using-Machine-learning/blob/main/BankNote%20Autrhentication\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scikit learn"
      ],
      "metadata": {
        "id": "XwQrSHVeSBWL"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZ0-Qc5YRWco",
        "outputId": "7dd02ab7-1396-4db8-bc88-0c025ca3e9ed"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import datasets\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "X=iris.data\n",
        "y=iris.target\n",
        "print(y[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train-test Split:"
      ],
      "metadata": {
        "id": "jX7CSN0CTvja"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "# Assuming you have X (features) and y (target variable) already defined\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Print the shapes of the resulting datasets\n",
        "print(\"Shape of X_train:\", X_train.shape)\n",
        "print(\"Shape of X_test:\", X_test.shape)\n",
        "print(\"Shape of y_train:\", y_train.shape)\n",
        "print(\"Shape of y_test:\", y_test.shape)\n",
        "\n",
        "# Optionally, print a few samples from the datasets\n",
        "print(\"\\nSamples from X_train:\")\n",
        "print(X_train[:5])\n",
        "\n",
        "print(\"\\nSamples from y_train:\")\n",
        "print(y_train[:5])\n",
        "\n",
        "print(\"\\nSamples from X_test:\")\n",
        "print(X_test[:5])\n",
        "\n",
        "print(\"\\nSamples from y_test:\")\n",
        "print(y_test[:5])\n",
        "df=pd.DataFrame(X)\n",
        "print(df.head(3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qA3j3cDaT0Lh",
        "outputId": "8b6100da-3b95-4bc8-f25e-41df7d5ac6ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of X_train: (120, 4)\n",
            "Shape of X_test: (30, 4)\n",
            "Shape of y_train: (120,)\n",
            "Shape of y_test: (30,)\n",
            "\n",
            "Samples from X_train:\n",
            "[[4.6 3.6 1.  0.2]\n",
            " [5.7 4.4 1.5 0.4]\n",
            " [6.7 3.1 4.4 1.4]\n",
            " [4.8 3.4 1.6 0.2]\n",
            " [4.4 3.2 1.3 0.2]]\n",
            "\n",
            "Samples from y_train:\n",
            "[0 0 1 0 0]\n",
            "\n",
            "Samples from X_test:\n",
            "[[6.1 2.8 4.7 1.2]\n",
            " [5.7 3.8 1.7 0.3]\n",
            " [7.7 2.6 6.9 2.3]\n",
            " [6.  2.9 4.5 1.5]\n",
            " [6.8 2.8 4.8 1.4]]\n",
            "\n",
            "Samples from y_test:\n",
            "[1 0 2 1 1]\n",
            "     0    1    2    3\n",
            "0  5.1  3.5  1.4  0.2\n",
            "1  4.9  3.0  1.4  0.2\n",
            "2  4.7  3.2  1.3  0.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "BASIC MODELS :"
      ],
      "metadata": {
        "id": "okadBZfyRZls"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "LINEAR REGRESSION"
      ],
      "metadata": {
        "id": "Eb2DSa-WRdsy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "model=LinearRegression()\n",
        "model.fit(X_train,y_train)\n",
        "predictions = model.predict(X_test)"
      ],
      "metadata": {
        "id": "8_feikShRZQO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "linear regression for predicting a continous target variable"
      ],
      "metadata": {
        "id": "VPV2rZszOByB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "np.random.seed(42)\n",
        "X=2*np.random.rand(100,1)\n",
        "y=4+3*X+np.random.randn(100,1)\n",
        "\n",
        "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)\n",
        "model=LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "predictions=model.predict(X_test)\n",
        "mse=mean_squared_error(y_test,predictions)\n",
        "print(f\"Mean_squared_error on Test Set: {mse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YUxXbueWJMOF",
        "outputId": "7677c1b5-a735-41b8-f5b2-030b917a853a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean_squared_error on Test Set: 0.6536995137170021\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LOGISTIC REGRESSION"
      ],
      "metadata": {
        "id": "ILO5gobXOI-E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "for binary or multiclass classification"
      ],
      "metadata": {
        "id": "c4AR7NokOMvz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "#model = LogisticRegression()\n",
        "#model.fit(X_train, y_train)\n",
        "#predictions = model.predict(X_test)\n"
      ],
      "metadata": {
        "id": "oxdVUzw3OMAm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "DECISION TREES  \n",
        "for both classification and regresssion"
      ],
      "metadata": {
        "id": "yVz9k-kFTKuA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Convert a continuous target variable to binary labels (example only)\n",
        "\n",
        "y_train_binary = (y_train > y_train.mean()).astype(int)\n",
        "\n",
        "# Create and fit the DecisionTreeClassifier\n",
        "model = DecisionTreeClassifier()\n",
        "model.fit(X_train, y_train_binary)\n",
        "predictions = model.predict(X_test)\n"
      ],
      "metadata": {
        "id": "5lv7UgymTHSP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n",
        "from sklearn.metrics import accuracy_score, mean_squared_error\n",
        "\n",
        "# Example data for classification\n",
        "X_classification = np.random.rand(100, 1)\n",
        "y_classification = (X_classification > 0.5).astype(int).reshape(-1)\n",
        "\n",
        "# Example data for regression\n",
        "X_regression = 5 * np.random.rand(100, 1)\n",
        "y_regression = 2 * X_regression.squeeze() + 1 + np.random.randn(100)\n",
        "\n",
        "# Split data into training and testing sets for both classification and regression\n",
        "X_train_classification, X_test_classification, y_train_classification, y_test_classification = train_test_split(\n",
        "    X_classification, y_classification, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "X_train_regression, X_test_regression, y_train_regression, y_test_regression = train_test_split(\n",
        "    X_regression, y_regression, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Classification using DecisionTreeClassifier\n",
        "classifier_model = DecisionTreeClassifier()\n",
        "classifier_model.fit(X_train_classification, y_train_classification)\n",
        "predictions_classification = classifier_model.predict(X_test_classification)\n",
        "\n",
        "# Regression using DecisionTreeRegressor\n",
        "regressor_model = DecisionTreeRegressor()\n",
        "regressor_model.fit(X_train_regression, y_train_regression)\n",
        "predictions_regression = regressor_model.predict(X_test_regression)\n",
        "\n",
        "# Evaluate models\n",
        "accuracy = accuracy_score(y_test_classification, predictions_classification)\n",
        "mse = mean_squared_error(y_test_regression, predictions_regression)\n",
        "\n",
        "print(f\"Classification Accuracy: {accuracy}\")\n",
        "print(f\"Regression Mean Squared Error: {mse}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z8FJwFwKVgmn",
        "outputId": "d929124c-a3e6-433c-c953-7fc31c364356"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Accuracy: 0.95\n",
            "Regression Mean Squared Error: 2.0840269711058976\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.MODEL EVALUTION"
      ],
      "metadata": {
        "id": "FBwyiIMDV6xL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X_classification = iris.data\n",
        "y_classification = iris.target\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train_classification, X_test_classification, y_train_classification, y_test_classification = train_test_split(\n",
        "    X_classification, y_classification, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Classification using DecisionTreeClassifier\n",
        "classifier_model = DecisionTreeClassifier()\n",
        "classifier_model.fit(X_train_classification, y_train_classification)\n",
        "predictions_classification = classifier_model.predict(X_test_classification)\n",
        "\n",
        "# Evaluate the model\n",
        "accuracy = accuracy_score(y_test_classification, predictions_classification)\n",
        "report = classification_report(y_test_classification, predictions_classification)\n",
        "matrix = confusion_matrix(y_test_classification, predictions_classification)\n",
        "\n",
        "print(f\"Classification Accuracy: {accuracy}\")\n",
        "print(\"Classification Report:\")\n",
        "print(report)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pbTdOhg5Xn3z",
        "outputId": "f85cf34e-dce5-44fa-e271-56f8703c8daa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Accuracy: 1.0\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00        10\n",
            "           1       1.00      1.00      1.00         9\n",
            "           2       1.00      1.00      1.00        11\n",
            "\n",
            "    accuracy                           1.00        30\n",
            "   macro avg       1.00      1.00      1.00        30\n",
            "weighted avg       1.00      1.00      1.00        30\n",
            "\n",
            "Confusion Matrix:\n",
            "[[10  0  0]\n",
            " [ 0  9  0]\n",
            " [ 0  0 11]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "accuracy = accuracy_score(y_test, predictions)\n",
        "report = classification_report(y_test, predictions)\n",
        "matrix = confusion_matrix(y_test, predictions)\n"
      ],
      "metadata": {
        "id": "6ZJPFJm0V_Wf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(model, X_train, y_train, cv=5)\n"
      ],
      "metadata": {
        "id": "7PfB5kuZWCY3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}