import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

################DATA COLLECTION AND ANALYSIS#################
#################PIMA Diabetes Dataset######################
diabetes_datasets=pd.read_csv('/content/diabetes.csv')
pd.read_csv?
diabetes_datasets.head()
diabetes_datasets.shape
diabetes_datasets.describe()
diabetes_datasets['Outcome'].value_counts()
diabetes_datasets.groupby('Outcome').mean()

X=diabetes_datasets.drop(columns='Outcome',axis=1)
Y=diabetes_datasets['Outcome']

print(X)
print(Y)

scaler=StandardScaler()
scaler.fit(X)
standardized_data=scaler.transform(X)
print(standardized_data)

X=standardized_data
Y=diabetes_datasets['Outcome']

print(X)
print(Y)

##############Train Test Split###############
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

classifier=svm.SVC(kernel='linear')

################training the support vector machine###########

classifier.fit(X_train,Y_train)

##############Model evaluation############################

#################Accuracy score on training data#############
X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data :',training_data_accuracy)

#Accuracy score on test data
X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the test data :',test_data_accuracy)

##############Making a Prediction system####################


input_data=(6,148,72,35,0,33.6,0.627,50)
#changing the whole data as numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)


# standardized the input data
std_data=scaler.transform(input_data_reshaped)
print(std_data)


prediction=classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

























